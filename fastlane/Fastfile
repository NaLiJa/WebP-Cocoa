desc "Build, package and upload all of the WebP framework binaries"
lane :package do |options|
  tag = options[:tag]

  # Get the tag for the version we want to build
  if tag
    ENV["WEBP_TAG_VERSION"] = tag
  else
    UI.user_error!("No tag specified. Please specify a libwebp repo tag to target.")
  end
  
  # Verify we haven't shipped this tag before
  if git_tag_exists(tag: tag)
    UI.user_error!("Tag #{tag} already exists! Please use a different one.")
  end
  
  # Build the binaries
  UI.message "Building binaries..."
  sh "cd .. && sh build.sh all"
  UI.success "... done!"

  # Package up the main bundle
  UI.message "Building main package"
  sh "cd .. && sh build.sh package-all"
  UI.success "...done!"

  # Package up a Carthage variant
  UI.message "Building Carthage package"
  sh "cd .. && sh build.sh package-carthage"
  UI.success "...done!"

  # Package up all of the platform frameworks
  UI.message "Building platform packages"
  sh "cd .. && sh build.sh package-platform"
  UI.success "...done!"

  # Package up all of the separate frameworks
  UI.message "Building all separate packages"
  sh "cd .. && sh build.sh package-each"
  UI.success "...done!"

  # Get all of the files we created
  files = Dir["../build/*.zip"].map { |path| File.expand_path(path) }
  
  # Update the README with the links to the new version
  readme_text = File.read("../templates/README.md")
  readme_text = readme_text.gsub("{tag_version}", tag)
  File.write("../README.md", readme_text)

  # Commit the new README to GitHub
  begin
    git_pull
    git_add(path: "README.md")
    git_commit(path: "README.md", message: "Created Release " + tag)
    push_to_git_remote
  rescue => ex
    UI.error(ex)
  end

  # Cut a new release on GitHub Releases
  UI.message "Uploading to GitHub Releases"
  set_github_release(
    repository_name: "TimOliver/WebP-Cocoa",
    name: tag,
    tag_name: tag,
    description: "",
    commitish: "main",
    upload_assets: files
  )
  UI.success "...done!"

end
